import { Injectable, BadRequestException } from '@nestjs/common';
import { CashBackDto } from './dto/cashBack.dto';
import { CashbackStorage } from './cashbackStorage.service';
import { CardUtils } from '../cards/card.utils';
import { CashBackUtils } from './utils';
import { TransactionRepository } from '../transactions/transactionRepository';

@Injectable()
export class CashbackTransactions {
  constructor(
    private transactionRepository: TransactionRepository,
    private cashbackUtils: CashBackUtils,
    private cardUtils: CardUtils,
    private cashbackStorageService: CashbackStorage,
  ) {}

  async getCashBackToBalance({ amount, user_id }: CashBackDto) {
    const currCard = await this.cardUtils.getUserCard(user_id);
    const currStorage = await this.cashbackUtils.getUserCashBack(
      currCard.card_id,
    );

    const isBalanceSufficient =
      await this.cashbackStorageService.isBalanceSufficient(
        currCard.card_id,
        amount,
      );
    if (!isBalanceSufficient)
      throw new BadRequestException('–¢–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à –Ω–∞–º–∞—Ö–∞—Ç–∏?');

    try {
      await this.cashbackUtils.withdrawCashBackBalance(currStorage, amount);

      const calcAmount = amount - amount * 0.15;
      await this.cardUtils.addBalanceToCard(currCard, calcAmount);

      await this.transactionRepository.createTransactionRecord({
        sender_card_id: Math.random(),
        sender_full_name: 'CASH-BACK',
        receiver_card_id: currCard.card_id,
        receiver_card_number: currCard.card_number,
        receiver_full_name: `${currCard.owner_name} ${currCard.owner_surname}`,
        transaction_amount: amount - amount * 0.15,
        transaction_description: '–ö–µ—à–±–µ–∫üéâüíµ',
        transaction_type: 'CASH-BACK',
      });

      return 'Transaction Succesfull';
    } catch (error) {
      console.log(error);
    }
  }

  async updateCashBackBalance(id: number, amount: number) {
    const currStorage = await this.cashbackUtils.getUserCashBack(id);
    const calcAmount = amount * 0.02;
    await this.cashbackUtils.addCashBackBalance(currStorage, calcAmount);
    return 'Balance Updated';
  }
}

// –§–∞—Å–∞–¥ CashbackTransactions –∑–∞–±–µ–∑–ø–µ—á—É—î –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–µ—à–±–µ–∫–æ–º,
//  —Å–ø—Ä–æ—â—É—é—á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –≤ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–∏.
// –í—ñ–Ω —ñ–∑–æ–ª—é—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —è–∫–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö —Ç–∞ —ñ–Ω—à–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏.

// –¢–∞–∫–æ–∂, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É CashbackStorage –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É –∫–µ—à–±–µ–∫—É –≤—ñ–¥ —ñ–Ω—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π,
//  —â–æ –∑–∞–±–µ–∑–ø–µ—á—É—î –ø—Ä–∏–Ω—Ü–∏–ø —î–¥–∏–Ω–æ–≥–æ –æ–±–æ–≤'—è–∑–∫—É —Ç–∞ –ø–æ–ª–µ–≥—à—É—î –≤—ñ–¥–ª–∞–¥–∫—É —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.
